todo:

- implement expected utility (eu) function
    - EU = probability that a schedule will be accepted and succeed multiplied by the discounted reward for your country (self)
    - Carl finishing the Translate class
    - test cases 
    - discounted_reward = (gamma) ^ (length) * (endQuality - startQuality)
    - eu = probability_success * discounted_reward + (1 - probability_success) * failure_cost
    - TODO: figure out how to find the probability_success and the failure_cost??
    - Country wants the more advanced resources
    - Incentive for transfer actions? 

- Transfer:
    - If 1 country needs resources but has a surplus of others, then they can trade w another country 
    - Want to calculate the payout of a transaction for both countries
        transfer(B,A, [raw1, raw2], [advanced7]):
            payout_A = (use some function to calculate the payout)

        - function to find equilibrium between payouts, and can help us determine the probability of a successful trade

        - universal requirements for resources
            - Research minimum number of people that 1 unit of that resource satisfies 
                - Some countries should have surplus, some countries should have shortage
        
        - countries keep transforming until they hit their basic resource requirements and then they resort to transfers
        - calculate the needs and surplus of each country; then, if there is a close enough match: there's a transfer
        - Coming up with a number:
            - negative number for need, positive number for surplus
        - Classify some resources as tradeable, others as untradeable
        - probability of country B accepting our trade:
            - Find all other possible trades B can make for the resources that it's getting from us 
            - survival level, comfortable level
        - Stable marriage problem
        - Having a list of possible trades 
        - We need a function to find the equilibrium of a trade between countries
        - Function that takes Rank of our country in other country's preference list --> probability 
        - No more trades to be done = end state?


TODO:
    - Think of ways to generate our successors, 
    - how to generate our possible transfer actions
    - Thursday presentation: team 1 gave an approach for transfer operations
    - getSuccessors should generate all the possible choices our country can take
    - Need a way to generate the good transfer operations 
    - If doing an alloy transformation

country: {R1: 010, R2: 500, R3: 200}
When I call generateSuccessors on currentstate, this will construct 100 transformations
transform = Transform(country, allys, 1) # 1 being the multiplier, if it's 2 we take two sets of input; can go from 1 to 100

- We need a way to only generate the good transfer/transform operations


-- For me: determine minimum survival/comfrable levels (aka 1-4)


Notes from Dr. Fisher:

'''
For part 1: we don't need to worry about other countries rejecting/accepting a transfer?

Part 1 is entirely internal simulation:
    - alpha-beta search / minimax search
    - we can determine how likely it is that another country accepts a transfer
    - part 1 analagous to alpha-beta search

    - For part 2: we will need to calculate probability for schedule to succeed
    - We're still simulating transfers, like in alpha-beta search: let's pretend the opponent moves that way, but the opponent isn't even doing that
    - In the simulated world, we're simulating the transfer!
    - We don't want to collect probabilities whether or not a country will accept an offer

    - Sigmoid function

    - How you'll compute the probability: "The Probability that a Schedule will Succeed" section

    - The better the schedule is for another country, the more likely the schedule will be accepted by the other country

    - Average payout: not expected to do

    - Need utility vs Surplus utility

'''

- Closer we reach survival threshold, the higher the need 
    Below survival: exponential state quality decrease 
    - Use weights to help with this
    - Countries should base trades on overall state quality of certain resources 
- Find an optimal value for values like gamma & failure cost


TODO:
    - Create a threshold class that returns the net payout 
    - generate transfers based on insufficient resources
    - Create a templates class 
        - Implement new templates 
    - See how these classes work with the existing files, esp transform
    - Work on a probability function?
        - Otherwise just use transfer functions that bring resources into our country
    - Sigmoid function?
    - We can randomly generate a bunch of operations and select the best one out of them
    - 


- Do we have a way to trim the search space? 

- Trimming the search space? 

- Look into ways to use Threshold in the Transfer

- For now, we can use the payout as the X value?

- Change how the world generates successors 

